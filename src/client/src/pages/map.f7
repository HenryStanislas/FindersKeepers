

<template>
  <div class="page">
    <div class="toolbar toolbar-bottom" style="background-color: black; color: white";>
      <div class="toolbar-inner" style="display: flex; justify-content: center; align-items: center;">
        <div class="title" style="font-size: 24px;">FindersKeepers</div>
        <div class="cache-wrapper" style="position: absolute; right: 140px; top: 0; margin: 10px;">
          <a href="#" class="cache" style="color: white;" @click="${openCachePopup}">Add a cache</a>
        </div>
        <div class="logout-wrapper" style="position: absolute; right: 0; top: 0; margin: 10px;">
          <a href="#" class="logout" style="color: white;" @click="${logout}">Log out</a>
        </div>
        <div class="panel-open-wrapper" style="position: absolute; left: 0; top: 0; margin: 10px;">
          <a href="#" class="panel-open" style="color: white;" >Settings</a>
        </div>
      </div>
    </div>
    <div class="panel panel-left panel-cover">
      <div class="view">
        <div class="page">
            <div class="page-content">
              <div class="block-title">Settings</div>
              <div class="list">
                <ul>
                <li>
  <a href="#" class="item-link item-content" id="profile-button" @click="${openProfilePopup}">
    <div class="item-media">
      <i class="icon f7-icons ios-only">person_round_fill</i>
      <i class="icon material-icons md-only">person</i>
    </div>
    <div class="item-inner">
      <div class="item-title">Profile</div>
      <div class="item-after">View/Edit</div>
    </div>
  </a>
</li>
              <li>
    <div class="item-content">
      <div class="item-media">
        <i class="icon f7-icons ios-only">location</i>
        <i class="icon material-icons md-only">location_on</i>
      </div>
      <div class="item-inner">
        <div class="item-title">Location</div>
        <div class="item-after">On</div>
      </div>
    </div>
  </li>
 <li>
  <a href="#" class="item-link item-content" id="leaderboard-button" @click="${openLeaderboardPopup}">
    <div class="item-media">
      <i class="icon f7-icons ios-only">chart_bar</i>
      <i class="icon material-icons md-only">leaderboard</i>
    </div>
    <div class="item-inner">
      <div class="item-title">Ranking</div>
      <div class="item-after">Top 10</div>
    </div>
  </a>
</li>
 <li>
  <a href="#" class="item-link item-content" @click="${openRangePopup}">
    <div class="item-media">
      <i class="icon f7-icons ios-only">slider_horizontal_3</i>
      <i class="icon material-icons md-only">tune</i>
    </div>
    <div class="item-inner">
      <div class="item-title">Range</div>
      <div class="item-after"><span id="range-value">${localStorage.getItem('radius')} meters</span></div>
    </div>
  </a>
</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="page-content">
      <div class="map-wrapper" style="border-top: 10px solid black; height: calc(100% - 96px);">
        <div id="map" style="height: 100%;"></div>
      </div>
      <script>
        var map = L.map('map').fitWorld();

        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
          maxZoom: 19,
          attribution: 'Â© OpenStreetMap'
        }).addTo(map);

        const key = 'alPYKT8GM8T9IUfX9h3r';

        L.control.maptilerGeocoding({ apiKey: key }).addTo(map);

        map.locate({setView: true, maxZoom: 16});

function loadCaches() {
  fetch('http://127.0.0.1:3000/cache')
    .then(response => {
      if (!response.ok) throw new Error(response.status);
      return response.json();
    })
    .then(data => {
      data.forEach(cache => {
        const lat = cache.location.lat;
        const lng = cache.location.lng;
        const difficulty = cache.difficulty;
        const username = cache.username;
        const latRounded = Math.round(lat * 1000) / 1000;
        const lngRounded = Math.round(lng * 1000) / 1000;
        
        const userLocation = map.getCenter();
        const cacheLocation = L.latLng(lat, lng);
        
        
        const radius = localStorage.getItem('radius');
        
        const distance = cacheLocation.distanceTo(userLocation);
        if (distance > radius) return; // skip this cache

        // create the marker using the custom icon
        let markerColor = 'blue';

        // Retrieve comments for this cache
        const cacheID = cache._id
        fetch("http://127.0.0.1:3000/comment/" + cacheID)
          .then(response => {
            if (!response.ok) throw new Error(response.status);
            return response.json();
          })
          .then(comments => {
            // Check if any comments have foundCache set to true
            comments.forEach(comment => {
              if (comment.foundCache && (comment.username === localStorage.getItem('username'))) {
                markerColor = 'green';
              }
            });

            if (username === localStorage.getItem('username')) {
              markerColor = 'red';
            }

            const markerIcon = L.icon({
              iconUrl: "https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-"+markerColor+".png",
              iconSize: [25, 41],
              iconAnchor: [12, 41],
              popupAnchor: [1, -34],
              shadowSize: [41, 41]
            });
            const marker = L.marker([lat, lng], {icon: markerIcon}).addTo(map);

            marker.bindPopup(username + " created a cache at location " + latRounded + "," + lngRounded + " with difficulty " + difficulty);
            marker.on('click', () => {
              createCommentPopup(cache);
            });
          })
          .catch(error => {
            console.error('Error:', error);
          });
      });
    })
    .catch(error => {
      console.error('Error:', error);
    });
}
        map.on('locationfound', onLocationFound);

map.on('click', (e) => {
  const lat = e.latlng.lat;
  const lng = e.latlng.lng;

  setTimeout(() => {
    const confirmCache = confirm('Do you want to create a new cache?');
    if (confirmCache) {
      

      const difficulty = prompt('Enter the difficulty of the cache (1-5):');
      if (!difficulty) return;

      const cache = {
        username: localStorage.getItem('username'),
        location: { lat: lat, lng: lng },
        difficulty: parseInt(difficulty),
      };

      fetch('http://127.0.0.1:3000/cache', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ${localStorage.getItem('token')}'
        },
        body: JSON.stringify(cache)
      })
        .then(response => {
          if (!response.ok) throw new Error(response.status);
          return response.json();
        })
        .then(data => {
          const latRounded = Math.round(lat * 1000) / 1000;
          const lngRounded = Math.round(lng * 1000) / 1000;
          const marker = L.marker([lat, lng]).addTo(map);
          marker.bindPopup(localStorage.getItem('username') + " created a cache at location " + latRounded + "," + lngRounded + " with difficulty " + difficulty).openPopup();
          window.location.reload();
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Failed to add cache.');
        });
    }
  }, 100);
});

   function onLocationFound(e) {
  const radius = e.accuracy;
  const radius2 = localStorage.getItem('radius');

  L.marker(e.latlng).addTo(map)
    .bindPopup("You are within " + radius + " meters from this point")
    .openPopup();
  
  L.circle(e.latlng, radius).addTo(map);
  
  // add a second circle with a light pink color
  L.circle(e.latlng, {
    radius: radius2,
    color: '#ffcccc',
    fillColor: '#ffcccc',
    fillOpacity: 0.1
  }).addTo(map);
  
  loadCaches();
}
        
function createCommentPopup(cache) {
  const isOwner = localStorage.getItem('username') === cache.username;
  
  const popupContent = document.createElement('div');
  
  // Add title
  const title = document.createElement('h3');
  title.textContent = 'Cache Info';
  popupContent.appendChild(title);
  
  // Add description
  const desc = document.createElement('p');

  const difficultyText = document.createElement('span');
  difficultyText.textContent = 'Difficulty: ';
  difficultyText.style.color = 'green';
  difficultyText.style.fontWeight = 'bold';
  desc.appendChild(difficultyText);

  const difficultyValue = document.createElement('span');
  difficultyValue.textContent = cache.difficulty;
  difficultyValue.style.color = 'green';
  difficultyValue.style.fontWeight = 'bold';
  desc.appendChild(difficultyValue);

  desc.appendChild(document.createElement('br'));

  const createdByText = document.createElement('span');
  createdByText.textContent = 'Created by: ';
  createdByText.style.color = 'red';
  createdByText.style.fontWeight = 'bold';
  desc.appendChild(createdByText);

  const createdByName = document.createElement('span');
  createdByName.textContent = cache.username;
  createdByName.style.color = 'red';
  createdByName.style.fontWeight = 'bold';
  desc.appendChild(createdByName);

  popupContent.appendChild(desc);
  
  // Add links
  const linksContainer = document.createElement('div');
  linksContainer.classList.add('links-container');
  
  const commentLink = document.createElement('a');
  commentLink.textContent = "Leave a comment  ";
  const cacheId = cache._id.toString();
  commentLink.href = '/comment/';
  commentLink.classList.add('link');
  localStorage.removeItem('cacheID');
  localStorage.setItem('cacheID', cacheId);
  linksContainer.appendChild(commentLink);

  const viewComments = document.createElement('a');
  viewComments.textContent = "View comments     ";
  viewComments.href = '/viewcomments/';
  viewComments.classList.add('link');
  localStorage.removeItem('cacheID');
  localStorage.setItem('cacheID', cacheId);
  linksContainer.appendChild(viewComments);


if (isOwner) {
  const deleteLink = document.createElement('a');
  deleteLink.textContent = 'Delete the cache';
  deleteLink.href = '#';
  
  deleteLink.addEventListener('click', () => {
    const confirmed = confirm('Are you sure you want to delete this cache?');
    if (confirmed) {
      const cacheId = cache._id.toString();
      fetch("http://127.0.0.1:3000/cache/"+cache._id, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        }
      })
      .then(response => {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.json();
      })
      .then(data => {
        // Remove the marker from the map
        
        
        marker.remove();
        
      })
      .catch(error => {
        console.error('Error:', error);
      });
    }
    window.location.reload();
    
  });
  
  popupContent.appendChild(deleteLink);
}
  popupContent.appendChild(linksContainer);
  
  // Create the popup
  const popup = L.popup();
  popup.setContent(popupContent);
  
  // Bind the popup to the marker
  const marker = L.marker([cache.location.lat, cache.location.lng]).addTo(map);
  marker.bindPopup(popup);
}

      </script>
    </div>
  </div>
</template>

<script>
  export default (props, { $f7, $update }) => {
    const logout = () => {
      localStorage.removeItem('token');
      localStorage.removeItem('loggedIn');
      window.location.replace("/signup");
    };

function openProfilePopup() {
  $f7.views.main.router.navigate('/profile/');
}

    

     // Add a cache at the current location
function openCachePopup() {
  const buttons = [
    {
      text: 'Enter Coordinates',
onClick: function () {
  $f7.dialog.prompt('Enter the coordinates of the cache in the format "lat, lng":', 'Add a cache', function (cacheCoords) {
    if (!cacheCoords) return;
    cacheCoords = cacheCoords.split(',');
    const lat = parseFloat(cacheCoords[0].trim());
    const lng = parseFloat(cacheCoords[1].trim());
    if (isNaN(lat) || isNaN(lng)) {
      $f7.dialog.alert('Invalid coordinates format. Please enter the coordinates in the format "lat, lng".');
      return;
    }
    
    
    $f7.dialog.prompt('Enter the difficulty of the cache (1-5):', 'Add a cache', function (difficulty) {
    if (!difficulty) return;
    const cache = {
      username: localStorage.getItem('username'),
      location: { lat: lat, lng: lng },
      difficulty: parseInt(difficulty),
    };
    fetch('http://127.0.0.1:3000/cache', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      },
      body: JSON.stringify(cache)
    })
      .then(response => {
        if (!response.ok) throw new Error(response.status);
        return response.json();
      })
      .then(data => {
  const latRounded = Math.round(lat * 1000) / 1000;
  const lngRounded = Math.round(lng * 1000) / 1000;
   const marker = L.marker([lat, lng]).addTo(map);
        marker.bindPopup(localStorage.getItem('username') + " created a cache at location " + latRounded + "," + lngRounded + " with difficulty " + difficulty).openPopup();
        window.location.reload();
        
})
      .catch(error => {
        console.error('Error:', error);
        $f7.dialog.alert('Failed to add cache.');
      });
      });
  });
  
}
    },
    {
      text: 'My Current Location',
      onClick: function () {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function (position) {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            $f7.dialog.prompt('Enter the difficulty of the cache (1-5):', 'Add a cache', function (difficulty) {
              if (!difficulty) return;
             
               const cacheData = {
      username: localStorage.getItem('username'),
      location: { lat: lat, lng: lng },
      difficulty: parseInt(difficulty),
    };
                 fetch('http://127.0.0.1:3000/cache', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      },
      body: JSON.stringify(cacheData)
    })
      .then(response => {
        if (!response.ok) throw new Error(response.status);
        return response.json();
      })
     .then(data => {
  const latRounded = Math.round(lat * 1000) / 1000;
  const lngRounded = Math.round(lng * 1000) / 1000;
  const marker = L.marker([lat, lng]).addTo(map);
        marker.bindPopup(localStorage.getItem('username') + " created a cache at location " + latRounded + "," + lngRounded + " with difficulty " + difficulty).openPopup();
        window.location.reload();
})
      .catch(error => {
        console.error('Error:', error);
        $f7.dialog.alert('Failed to add cache.');
      });
            });
          });
        } else {
          $f7.dialog.alert('Geolocation is not supported by this browser. Please enter the coordinates manually.');
        }
      }
    }
  ];

  const actions = $f7.actions.create({ buttons: buttons });
  actions.open();
  
}

    // Create a red marker icon
    const redMarker = L.icon({
      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.4/images/marker-shadow.png',
      iconSize: [25, 41],
      iconAnchor: [12, 41],
      popupAnchor: [1, -34],
      shadowSize: [41, 41]
    });



function openRangePopup() {
  const popupHTML = `
    <div class="popup">
      <div class="view">
        <div class="page">
          <div class="navbar">
            <div class="navbar-inner">
              <div class="title">Set the range within which you can see the caches</div>
              <div class="right">
                <a href="#" class="link popup-close">Close</a>
              </div>
            </div>
          </div>
          <div class="page-content">
            <div class="list">
              <ul>
                <li>
                  <div class="item-content item-input">
                    <div class="item-inner">
                      <div class="item-title item-label">Range (in meters)</div>
                      <div class="item-input-wrap">
                        <input type="number" placeholder="Enter range" id="range-input" value="${localStorage.getItem('radius')}">
                      </div>
                    </div>
                  </div>
                </li>
              </ul>
            </div>
            <div class="block">
              <div class="row">
                <div class="col">
                  <a href="#" class="button button-fill color-green" id="save-range-button">Save</a>
                </div>
                <div class="col">
                  <a href="#" class="button popup-close">Cancel</a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  `;
  const popup = $f7.popup.create({
    content: popupHTML,
    on: {
      opened() {
        const rangeInput = document.querySelector('#range-input');
        rangeInput.focus();
        rangeInput.select();

        const saveRangeButton = document.querySelector('#save-range-button');
        saveRangeButton.addEventListener('click', setRange);
      },
    },
  });
  popup.open();
}




function setRange() {
  const rangeInput = document.querySelector('#range-input');
  const newRange = rangeInput.value;
  localStorage.setItem('radius', newRange);
  const rangeValue = document.querySelector('#range-value');
  rangeValue.textContent = `${newRange} meters`;
  $f7.popup.close();
  window.location.reload();

}

function openLeaderboardPopup() {
  const popup = $f7.popup.create({
    content: `
      <div class="popup leaderboard-popup">
        <div class="view">
          <div class="page">
            <div class="navbar">
              <div class="navbar-inner">
                <div class="title">Leaderboard</div>
                <div class="right">
                  <a href="#" class="link popup-close">Close</a>
                </div>
              </div>
            </div>
            <div class="page-content">
              <div class="block-title" style="color: #FF69B4;">Top 10 Cachers</div>
              <div id="cacher-ranking"></div>
              <div class="block-title" style="color: #FFA07A;">Top 10 Found Caches</div>
              <div id="cache-ranking"></div>
              <div class="block-title" style="color: #87CEFA;">Top 10 Least Found Caches</div>
              <div id="least-found-ranking"></div>
            </div>
          </div>
        </div>
      </div>
    `,
    on: {
      open: async () => {
        try {
          // Fetch comments
          const commentResponse = await fetch("http://127.0.0.1:3000/comment/");
          if (!commentResponse.ok) throw new Error(commentResponse.status);
          const comments = await commentResponse.json();

          // Fetch caches
          const cacheResponse = await fetch("http://127.0.0.1:3000/cache/");
          if (!cacheResponse.ok) throw new Error(cacheResponse.status);
          const caches = await cacheResponse.json();

          // Extract cache locations
          const cacheLocationsLng = {};
          const cacheLocationsLat= {};
           const cacheLocations = {};

          
          let lat, lng;
          caches.forEach(cache => {
            lng = cache.location.lng;
            lat=cache.location.lat;
            cacheLocations[cache._id] = { lng, lat };
            cacheLocationsLng[cache._id] = lng;
            cacheLocationsLat[cache._id] =lat;
            
          });
       
          const count = {};
          const foundCacheCount = {};
          comments.forEach(comment => {
            if (comment.foundCache) {
              if (count[comment.username]) {
                count[comment.username]++;
              } else {
                count[comment.username] = 1;
              }
              if (foundCacheCount[comment.cacheID]) {
                foundCacheCount[comment.cacheID]++;
              } else {
                foundCacheCount[comment.cacheID] = 1;
              }
            }
          });
           const sortedCachers = Object.entries(count).sort((a, b) => b[1] - a[1]).slice(0, 10);
          const cacherList = sortedCachers.map(([username, count], i) => `<li>${i + 1}. ${username} - ${count}</li>`).join("");
          document.querySelector("#cacher-ranking").innerHTML = `<ul>${cacherList}</ul>`;
          const sortedFoundCaches = Object.entries(foundCacheCount).sort((a, b) => b[1] - a[1]).slice(0, 10);
          const foundCacheList = sortedFoundCaches.map(([cacheID, count], i) => `<li>${i + 1}. Cache ${cacheID} (${cacheLocationsLat[cacheID]}, ${cacheLocationsLng[cacheID]}) - ${count} finds</li>`).join('');
          document.querySelector("#cache-ranking").innerHTML = `<ul>${foundCacheList}</ul>`;

          const sortedLeastFoundCaches = Object.entries(foundCacheCount).sort((a, b) => a[1] - b[1]).slice(0, 10);
          const leastFoundCacheList = sortedLeastFoundCaches.map(([cacheID, count], i) => `<li>${i + 1}. Cache ${cacheID} - ${count} finds</li>`).join("");
          document.querySelector("#least-found-ranking").innerHTML = `<ul>${leastFoundCacheList}</ul>`;
        } catch (error) {
          console.error('Error:', error);
        }
      },
    },
  });
  
  popup.open();
}
    return $render;
  };
</script>