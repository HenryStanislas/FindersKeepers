<template>
  <div class="page">
    <div class="toolbar toolbar-bottom" style="background-color: black; color: white";>
     <div class="toolbar-inner">
  <div class="title">FindersKeepers</div>
  <div class="cache-wrapper" style="position: absolute; right: 140px; top: 0; margin: 10px;">
    <a href="#" class="cache" style="color: white;" @click="${openCachePopup}">Add a cache</a>
  </div>
  
  <div class="logout-wrapper" style="position: absolute; right: 0; top: 0; margin: 10px;">
    <a href="#" class="logout" style="color: white;" @click="${logout}">Log out</a>
  </div>
</div>
    </div>
    <div class="page-content">
      <div class="map-wrapper" style="border-top: 10px solid black; height: calc(100% - 96px);">
        <div id="map" style="height: 100%;"></div>
      </div>
      <script>
        var map = L.map('map').fitWorld();

        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
          maxZoom: 19,
          attribution: 'Â© OpenStreetMap'
        }).addTo(map);

        const key = 'alPYKT8GM8T9IUfX9h3r';

        L.control.maptilerGeocoding({ apiKey: key }).addTo(map);

        map.locate({setView: true, maxZoom: 16});

function loadCaches() {
  fetch('http://127.0.0.1:3000/cache')
    .then(response => {
      if (!response.ok) throw new Error(response.status);
      return response.json();
    })
    .then(data => {
      data.forEach(cache => {
        const lat = cache.location.lat;
        const lng = cache.location.lng;
        const difficulty = cache.difficulty;
        const username = cache.username;
        const latRounded = Math.round(lat * 1000) / 1000;
        const lngRounded = Math.round(lng * 1000) / 1000;
        
        const userLocation = map.getCenter();
        const cacheLocation = L.latLng(lat, lng);
        const radius = 5000; // in meters
        const distance = cacheLocation.distanceTo(userLocation);
        if (distance > radius) return; // skip this cache

        // create the marker using the custom icon
        let markerColor = 'blue';

        // Retrieve comments for this cache
        const cacheID = cache._id
        fetch("http://127.0.0.1:3000/comment/" + cacheID)
          .then(response => {
            if (!response.ok) throw new Error(response.status);
            return response.json();
          })
          .then(comments => {
            // Check if any comments have foundCache set to true
            comments.forEach(comment => {
              if (comment.foundCache && (comment.username === localStorage.getItem('username'))) {
                markerColor = 'green';
              }
            });

            if (username === localStorage.getItem('username')) {
              markerColor = 'red';
            }

            const markerIcon = L.icon({
              iconUrl: "https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-"+markerColor+".png",
              iconSize: [25, 41],
              iconAnchor: [12, 41],
              popupAnchor: [1, -34],
              shadowSize: [41, 41]
            });
            const marker = L.marker([lat, lng], {icon: markerIcon}).addTo(map);

            marker.bindPopup(username + " created a cache at location " + latRounded + "," + lngRounded + " with difficulty " + difficulty);
            marker.on('click', () => {
              createCommentPopup(cache);
            });
          })
          .catch(error => {
            console.error('Error:', error);
          });
      });
    })
    .catch(error => {
      console.error('Error:', error);
    });
}
        map.on('locationfound', onLocationFound);

        map.on('click', (e) => {
  const lat = e.latlng.lat;
  const lng = e.latlng.lng;
  console.log("Clicked at "+ lat + lng);
});

        function onLocationFound(e) {
          var radius = e.accuracy;
          L.marker(e.latlng).addTo(map)
            .bindPopup("You are within " + radius + " meters from this point").openPopup();
          L.circle(e.latlng, radius).addTo(map);
          loadCaches();
        }
        
function createCommentPopup(cache) {
  const isOwner = localStorage.getItem('username') === cache.username;
  
  const popupContent = document.createElement('div');
  
  // Add title
  const title = document.createElement('h3');
  title.textContent = 'Cache Info';
  popupContent.appendChild(title);
  
  // Add description
  const desc = document.createElement('p');

  const difficultyText = document.createElement('span');
  difficultyText.textContent = 'Difficulty: ';
  difficultyText.style.color = 'green';
  difficultyText.style.fontWeight = 'bold';
  desc.appendChild(difficultyText);

  const difficultyValue = document.createElement('span');
  difficultyValue.textContent = cache.difficulty;
  difficultyValue.style.color = 'green';
  difficultyValue.style.fontWeight = 'bold';
  desc.appendChild(difficultyValue);

  desc.appendChild(document.createElement('br'));

  const createdByText = document.createElement('span');
  createdByText.textContent = 'Created by: ';
  createdByText.style.color = 'red';
  createdByText.style.fontWeight = 'bold';
  desc.appendChild(createdByText);

  const createdByName = document.createElement('span');
  createdByName.textContent = cache.username;
  createdByName.style.color = 'red';
  createdByName.style.fontWeight = 'bold';
  desc.appendChild(createdByName);

  popupContent.appendChild(desc);
  
  // Add links
  const linksContainer = document.createElement('div');
  linksContainer.classList.add('links-container');
  
  const commentLink = document.createElement('a');
  commentLink.textContent = "Leave a comment  ";
  const cacheId = cache._id.toString();
  commentLink.href = '/comment/';
  commentLink.classList.add('link');
  localStorage.removeItem('cacheID');
  localStorage.setItem('cacheID', cacheId);
  linksContainer.appendChild(commentLink);

  const viewComments = document.createElement('a');
  viewComments.textContent = "View comments     ";
  viewComments.href = '/viewcomments/';
  viewComments.classList.add('link');
  localStorage.removeItem('cacheID');
  localStorage.setItem('cacheID', cacheId);
  linksContainer.appendChild(viewComments);


if (isOwner) {
  const deleteLink = document.createElement('a');
  deleteLink.textContent = 'Delete the cache';
  deleteLink.href = '#';
  
  deleteLink.addEventListener('click', () => {
    const confirmed = confirm('Are you sure you want to delete this cache?');
    if (confirmed) {
      fetch("http://127.0.0.1:3000/cache/"+cache._id, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        }
      })
      .then(response => {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.json();
      })
      .then(data => {
        console.log(data);
        $f7.dialog.alert('The cache has been deleted.');
        // Remove the marker from the map
        console.log("removing");
        marker.remove();
        window.location.reload();
      })
      .catch(error => {
        console.error('Error:', error);
        $f7.dialog.alert('There was an error deleting the cache. Please try again later.');
      });
    }
    
  });
  
  popupContent.appendChild(deleteLink);
}
  popupContent.appendChild(linksContainer);
  
  // Create the popup
  const popup = L.popup();
  popup.setContent(popupContent);
  
  // Bind the popup to the marker
  const marker = L.marker([cache.location.lat, cache.location.lng]).addTo(map);
  marker.bindPopup(popup);
}

      </script>
    </div>
  </div>
</template>

<script>
  export default (props, { $f7, $update }) => {
    const logout = () => {
      localStorage.removeItem('token');
      localStorage.removeItem('loggedIn');
      window.location.replace("/signup");
    };



    

     // Add a cache at the current location
function openCachePopup() {
  const buttons = [
    {
      text: 'Enter Coordinates',
onClick: function () {
  $f7.dialog.prompt('Enter the coordinates of the cache in the format "lat, lng":', 'Add a cache', function (cacheCoords) {
    if (!cacheCoords) return;
    cacheCoords = cacheCoords.split(',');
    const lat = parseFloat(cacheCoords[0].trim());
    const lng = parseFloat(cacheCoords[1].trim());
    if (isNaN(lat) || isNaN(lng)) {
      $f7.dialog.alert('Invalid coordinates format. Please enter the coordinates in the format "lat, lng".');
      return;
    }
    
    
    $f7.dialog.prompt('Enter the difficulty of the cache (1-5):', 'Add a cache', function (difficulty) {
    if (!difficulty) return;
    const cache = {
      username: localStorage.getItem('username'),
      location: { lat: lat, lng: lng },
      difficulty: parseInt(difficulty),
    };
    fetch('http://127.0.0.1:3000/cache', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      },
      body: JSON.stringify(cache)
    })
      .then(response => {
        if (!response.ok) throw new Error(response.status);
        return response.json();
      })
      .then(data => {
  const latRounded = Math.round(lat * 1000) / 1000;
  const lngRounded = Math.round(lng * 1000) / 1000;
   const marker = L.marker([lat, lng]).addTo(map);
        marker.bindPopup(localStorage.getItem('username') + " created a cache at location " + latRounded + "," + lngRounded + " with difficulty " + difficulty).openPopup();
        window.location.reload();
        
})
      .catch(error => {
        console.error('Error:', error);
        $f7.dialog.alert('Failed to add cache.');
      });
      });
  });
  
}
    },
    {
      text: 'My Current Location',
      onClick: function () {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function (position) {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            $f7.dialog.prompt('Enter the difficulty of the cache (1-5):', 'Add a cache', function (difficulty) {
              if (!difficulty) return;
             
               const cacheData = {
      username: localStorage.getItem('username'),
      location: { lat: lat, lng: lng },
      difficulty: parseInt(difficulty),
    };
              console.log(cacheData);
                 fetch('http://127.0.0.1:3000/cache', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      },
      body: JSON.stringify(cacheData)
    })
      .then(response => {
        if (!response.ok) throw new Error(response.status);
        return response.json();
      })
     .then(data => {
  const latRounded = Math.round(lat * 1000) / 1000;
  const lngRounded = Math.round(lng * 1000) / 1000;
  const marker = L.marker([lat, lng]).addTo(map);
        marker.bindPopup(localStorage.getItem('username') + " created a cache at location " + latRounded + "," + lngRounded + " with difficulty " + difficulty).openPopup();
        window.location.reload();
})
      .catch(error => {
        console.error('Error:', error);
        $f7.dialog.alert('Failed to add cache.');
      });
            });
          });
        } else {
          $f7.dialog.alert('Geolocation is not supported by this browser. Please enter the coordinates manually.');
        }
      }
    }
  ];

  const actions = $f7.actions.create({ buttons: buttons });
  actions.open();
  
}

    // Create a red marker icon
    const redMarker = L.icon({
      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.4/images/marker-shadow.png',
      iconSize: [25, 41],
      iconAnchor: [12, 41],
      popupAnchor: [1, -34],
      shadowSize: [41, 41]
    });

    return $render;
  };
</script>